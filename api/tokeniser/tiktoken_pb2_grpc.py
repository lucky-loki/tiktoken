# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.tokeniser import tiktoken_pb2 as api_dot_tokeniser_dot_tiktoken__pb2


class TiktokeniserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListEncodingNames = channel.unary_unary(
                '/tokeniser.Tiktokeniser/ListEncodingNames',
                request_serializer=api_dot_tokeniser_dot_tiktoken__pb2.ListEncodingNamesRequest.SerializeToString,
                response_deserializer=api_dot_tokeniser_dot_tiktoken__pb2.ListEncodingNamesReply.FromString,
                )
        self.GetTokenNumByEncodingName = channel.unary_unary(
                '/tokeniser.Tiktokeniser/GetTokenNumByEncodingName',
                request_serializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumByEncodingNameRequest.SerializeToString,
                response_deserializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumReply.FromString,
                )
        self.GetTokenNumByModel = channel.unary_unary(
                '/tokeniser.Tiktokeniser/GetTokenNumByModel',
                request_serializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumByModelRequest.SerializeToString,
                response_deserializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumReply.FromString,
                )


class TiktokeniserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListEncodingNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokenNumByEncodingName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokenNumByModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TiktokeniserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListEncodingNames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEncodingNames,
                    request_deserializer=api_dot_tokeniser_dot_tiktoken__pb2.ListEncodingNamesRequest.FromString,
                    response_serializer=api_dot_tokeniser_dot_tiktoken__pb2.ListEncodingNamesReply.SerializeToString,
            ),
            'GetTokenNumByEncodingName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokenNumByEncodingName,
                    request_deserializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumByEncodingNameRequest.FromString,
                    response_serializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumReply.SerializeToString,
            ),
            'GetTokenNumByModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokenNumByModel,
                    request_deserializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumByModelRequest.FromString,
                    response_serializer=api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tokeniser.Tiktokeniser', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tiktokeniser(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListEncodingNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokeniser.Tiktokeniser/ListEncodingNames',
            api_dot_tokeniser_dot_tiktoken__pb2.ListEncodingNamesRequest.SerializeToString,
            api_dot_tokeniser_dot_tiktoken__pb2.ListEncodingNamesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTokenNumByEncodingName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokeniser.Tiktokeniser/GetTokenNumByEncodingName',
            api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumByEncodingNameRequest.SerializeToString,
            api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTokenNumByModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tokeniser.Tiktokeniser/GetTokenNumByModel',
            api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumByModelRequest.SerializeToString,
            api_dot_tokeniser_dot_tiktoken__pb2.GetTokenNumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
