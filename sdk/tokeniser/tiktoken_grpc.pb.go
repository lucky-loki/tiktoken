// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: tokeniser/tiktoken.proto

package go_tokeniser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TiktokeniserClient is the client API for Tiktokeniser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TiktokeniserClient interface {
	ListEncodingNames(ctx context.Context, in *ListEncodingNamesRequest, opts ...grpc.CallOption) (*ListEncodingNamesReply, error)
	GetTokenNumByEncodingName(ctx context.Context, in *GetTokenNumByEncodingNameRequest, opts ...grpc.CallOption) (*GetTokenNumReply, error)
	GetTokenNumByModel(ctx context.Context, in *GetTokenNumByModelRequest, opts ...grpc.CallOption) (*GetTokenNumReply, error)
}

type tiktokeniserClient struct {
	cc grpc.ClientConnInterface
}

func NewTiktokeniserClient(cc grpc.ClientConnInterface) TiktokeniserClient {
	return &tiktokeniserClient{cc}
}

func (c *tiktokeniserClient) ListEncodingNames(ctx context.Context, in *ListEncodingNamesRequest, opts ...grpc.CallOption) (*ListEncodingNamesReply, error) {
	out := new(ListEncodingNamesReply)
	err := c.cc.Invoke(ctx, "/tokeniser.Tiktokeniser/ListEncodingNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiktokeniserClient) GetTokenNumByEncodingName(ctx context.Context, in *GetTokenNumByEncodingNameRequest, opts ...grpc.CallOption) (*GetTokenNumReply, error) {
	out := new(GetTokenNumReply)
	err := c.cc.Invoke(ctx, "/tokeniser.Tiktokeniser/GetTokenNumByEncodingName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tiktokeniserClient) GetTokenNumByModel(ctx context.Context, in *GetTokenNumByModelRequest, opts ...grpc.CallOption) (*GetTokenNumReply, error) {
	out := new(GetTokenNumReply)
	err := c.cc.Invoke(ctx, "/tokeniser.Tiktokeniser/GetTokenNumByModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TiktokeniserServer is the server API for Tiktokeniser service.
// All implementations must embed UnimplementedTiktokeniserServer
// for forward compatibility
type TiktokeniserServer interface {
	ListEncodingNames(context.Context, *ListEncodingNamesRequest) (*ListEncodingNamesReply, error)
	GetTokenNumByEncodingName(context.Context, *GetTokenNumByEncodingNameRequest) (*GetTokenNumReply, error)
	GetTokenNumByModel(context.Context, *GetTokenNumByModelRequest) (*GetTokenNumReply, error)
	mustEmbedUnimplementedTiktokeniserServer()
}

// UnimplementedTiktokeniserServer must be embedded to have forward compatible implementations.
type UnimplementedTiktokeniserServer struct {
}

func (UnimplementedTiktokeniserServer) ListEncodingNames(context.Context, *ListEncodingNamesRequest) (*ListEncodingNamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEncodingNames not implemented")
}
func (UnimplementedTiktokeniserServer) GetTokenNumByEncodingName(context.Context, *GetTokenNumByEncodingNameRequest) (*GetTokenNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenNumByEncodingName not implemented")
}
func (UnimplementedTiktokeniserServer) GetTokenNumByModel(context.Context, *GetTokenNumByModelRequest) (*GetTokenNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenNumByModel not implemented")
}
func (UnimplementedTiktokeniserServer) mustEmbedUnimplementedTiktokeniserServer() {}

// UnsafeTiktokeniserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TiktokeniserServer will
// result in compilation errors.
type UnsafeTiktokeniserServer interface {
	mustEmbedUnimplementedTiktokeniserServer()
}

func RegisterTiktokeniserServer(s grpc.ServiceRegistrar, srv TiktokeniserServer) {
	s.RegisterService(&Tiktokeniser_ServiceDesc, srv)
}

func _Tiktokeniser_ListEncodingNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEncodingNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiktokeniserServer).ListEncodingNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokeniser.Tiktokeniser/ListEncodingNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiktokeniserServer).ListEncodingNames(ctx, req.(*ListEncodingNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tiktokeniser_GetTokenNumByEncodingName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenNumByEncodingNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiktokeniserServer).GetTokenNumByEncodingName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokeniser.Tiktokeniser/GetTokenNumByEncodingName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiktokeniserServer).GetTokenNumByEncodingName(ctx, req.(*GetTokenNumByEncodingNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tiktokeniser_GetTokenNumByModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenNumByModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiktokeniserServer).GetTokenNumByModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokeniser.Tiktokeniser/GetTokenNumByModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiktokeniserServer).GetTokenNumByModel(ctx, req.(*GetTokenNumByModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tiktokeniser_ServiceDesc is the grpc.ServiceDesc for Tiktokeniser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tiktokeniser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokeniser.Tiktokeniser",
	HandlerType: (*TiktokeniserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEncodingNames",
			Handler:    _Tiktokeniser_ListEncodingNames_Handler,
		},
		{
			MethodName: "GetTokenNumByEncodingName",
			Handler:    _Tiktokeniser_GetTokenNumByEncodingName_Handler,
		},
		{
			MethodName: "GetTokenNumByModel",
			Handler:    _Tiktokeniser_GetTokenNumByModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokeniser/tiktoken.proto",
}
